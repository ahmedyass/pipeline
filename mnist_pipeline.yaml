# PIPELINE DEFINITION
# Name: mnist-classification-pipeline
# Description: A pipeline that processes MNIST data and trains a model.
components:
  comp-evaluate-model:
    executorLabel: exec-evaluate-model
    inputDefinitions:
      artifacts:
        model_input:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
  comp-preprocess-data:
    executorLabel: exec-preprocess-data
    outputDefinitions:
      artifacts:
        test_data_output:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        training_data_output:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-train-model:
    executorLabel: exec-train-model
    inputDefinitions:
      artifacts:
        training_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        model_output:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-evaluate-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - evaluate_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'tensorflow==2.4.0'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef evaluate_model(\n    model_input: Input[Model]\n    ):\n    import\
          \ tensorflow as tf\n    from tensorflow.keras.datasets import mnist\n  \
          \  from tensorflow.keras.utils import to_categorical\n\n    # Load and preprocess\
          \ test dataset\n    (_, _), (x_test, y_test) = mnist.load_data()\n    x_test\
          \ = x_test / 255.0\n    y_test = to_categorical(y_test)\n\n    # Load the\
          \ model from the input path provided by Kubeflow\n    model = tf.keras.models.load_model(model_input.path)\n\
          \n    # Evaluate the model\n    loss, accuracy = model.evaluate(x_test,\
          \ y_test)\n    print(f\"Test Loss: {loss}, Test Accuracy: {accuracy}\")\n\
          \n"
        image: python:3.7
    exec-preprocess-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - preprocess_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'tensorflow==2.4.0'\
          \ 'numpy' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef preprocess_data(\n    training_data_output: Output[Dataset],\n\
          \    test_data_output: Output[Dataset]\n):\n    import tensorflow as tf\n\
          \    from tensorflow.keras.datasets import mnist\n    import numpy as np\n\
          \    import os\n\n    # Load dataset\n    (x_train, y_train), (x_test, y_test)\
          \ = mnist.load_data()\n\n    # Normalize data\n    x_train, x_test = x_train\
          \ / 255.0, x_test / 255.0\n\n    # Save preprocessed data to the component's\
          \ output paths\n    np.savez_compressed(training_data_output.path, x_train=x_train,\
          \ y_train=y_train)\n    np.savez_compressed(test_data_output.path, x_test=x_test,\
          \ y_test=y_test)\n\n"
        image: python:3.7
    exec-train-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'tensorflow==2.4.0'\
          \ 'numpy' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(\n    training_data: Input[Dataset],\n    model_output:\
          \ Output[Model]\n):\n    import tensorflow as tf\n    from tensorflow.keras.models\
          \ import Sequential\n    from tensorflow.keras.layers import Dense, Flatten\n\
          \    from tensorflow.keras.utils import to_categorical\n    import numpy\
          \ as np\n\n    # Load preprocessed training data\n    with np.load(training_data.path)\
          \ as data:\n        x_train = data['x_train']\n        y_train = data['y_train']\n\
          \    y_train = to_categorical(y_train)\n\n    # Define and compile the model\n\
          \    model = Sequential([\n        Flatten(input_shape=(28, 28)),\n    \
          \    Dense(128, activation='relu'),\n        Dense(10, activation='softmax')\n\
          \    ])\n    model.compile(optimizer='adam', loss='categorical_crossentropy',\
          \ metrics=['accuracy'])\n\n    # Train the model\n    model.fit(x_train,\
          \ y_train, epochs=5)\n\n    # Save the trained model\n    model.save(model_output.path)\n\
          \n"
        image: python:3.7
pipelineInfo:
  description: A pipeline that processes MNIST data and trains a model.
  name: mnist-classification-pipeline
root:
  dag:
    tasks:
      evaluate-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-evaluate-model
        dependentTasks:
        - train-model
        inputs:
          artifacts:
            model_input:
              taskOutputArtifact:
                outputArtifactKey: model_output
                producerTask: train-model
        taskInfo:
          name: evaluate-model
      preprocess-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-preprocess-data
        taskInfo:
          name: preprocess-data
      train-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model
        dependentTasks:
        - preprocess-data
        inputs:
          artifacts:
            training_data:
              taskOutputArtifact:
                outputArtifactKey: training_data_output
                producerTask: preprocess-data
        taskInfo:
          name: train-model
schemaVersion: 2.1.0
sdkVersion: kfp-2.6.0
