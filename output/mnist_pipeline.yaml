# PIPELINE DEFINITION
# Name: mnist-classifier-dev
# Description: Detect digits
# Inputs:
#    hyperparameters: dict
# Outputs:
#    model-training-classification_metrics: system.ClassificationMetrics
#    model-training-metrics: system.Metrics
#    preprocessing-metrics: system.Metrics
components:
  comp-load-dataset:
    executorLabel: exec-load-dataset
    outputDefinitions:
      artifacts:
        x_test_artifact:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        x_train_artifact:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        y_test_artifact:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        y_train_artifact:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-model-building:
    executorLabel: exec-model-building
    outputDefinitions:
      artifacts:
        ml_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
  comp-model-training:
    executorLabel: exec-model-training
    inputDefinitions:
      artifacts:
        ml_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        x_test_processed:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        x_train_processed:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        y_test_artifact:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        y_train_artifact:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        hyperparameters:
          parameterType: STRUCT
    outputDefinitions:
      artifacts:
        classification_metrics:
          artifactType:
            schemaTitle: system.ClassificationMetrics
            schemaVersion: 0.0.1
        metrics:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
        model_trained:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
  comp-preprocessing:
    executorLabel: exec-preprocessing
    inputDefinitions:
      artifacts:
        x_test_artifact:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        x_train_artifact:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        metrics:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
        x_test_processed:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        x_train_processed:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-load-dataset:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - load_dataset
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef load_dataset(x_train_artifact: Output[Dataset],\n           \
          \      x_test_artifact: Output[Dataset],\n                 y_train_artifact:\
          \ Output[Dataset],\n                 y_test_artifact: Output[Dataset]\n\
          \    ):\n    '''\n    get dataset from Keras and load it separating input\
          \ from output and train from test\n    '''\n    import numpy as np\n   \
          \ from tensorflow import keras\n    import os\n\n    (x_train, y_train),\
          \ (x_test, y_test) = keras.datasets.mnist.load_data()\n\n    np.save(\"\
          /tmp/x_train.npy\",x_train)\n    os.rename(\"/tmp/x_train.npy\", x_train_artifact.path)\n\
          \n    np.save(\"/tmp/y_train.npy\",y_train)\n    os.rename(\"/tmp/y_train.npy\"\
          , y_train_artifact.path)\n\n    np.save(\"/tmp/x_test.npy\",x_test)\n  \
          \  os.rename(\"/tmp/x_test.npy\", x_test_artifact.path)\n\n    np.save(\"\
          /tmp/y_test.npy\",y_test)\n    os.rename(\"/tmp/y_test.npy\", y_test_artifact.path)\n\
          \n"
        image: tensorflow/tensorflow
    exec-model-building:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - model_building
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef model_building(ml_model : Output[Model]):\n    '''\n    Define\
          \ the model architecture\n    This way it's more simple to change the model\
          \ architecture and all the steps and indipendent\n    '''\n    from tensorflow\
          \ import keras\n    import tensorflow as tf\n    import os\n\n    #model\
          \ definition\n    model = keras.models.Sequential()\n    model.add(keras.layers.Conv2D(64,\
          \ (3, 3), activation='relu', input_shape=(28,28,1)))\n    model.add(keras.layers.MaxPool2D(2,\
          \ 2))\n\n    model.add(keras.layers.Flatten())\n    model.add(keras.layers.Dense(64,\
          \ activation='relu'))\n    model.add(keras.layers.Dense(32, activation='relu'))\n\
          \n    model.add(keras.layers.Dense(10, activation='softmax'))\n\n    #saving\
          \ model\n    model.save(ml_model.path)\n\n"
        image: tensorflow/tensorflow
    exec-model-training:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - model_training
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'scikit-learn'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef model_training(\n    ml_model : Input[Model],\n    x_train_processed\
          \ : Input[Dataset], x_test_processed: Input[Dataset],\n    y_train_artifact\
          \ : Input[Dataset], y_test_artifact :Input[Dataset],\n    hyperparameters\
          \ : dict, \n    metrics: Output[Metrics], classification_metrics: Output[ClassificationMetrics],\
          \ model_trained: Output[Model]\n    ):\n    \"\"\"\n    Build the model\
          \ with Keras API\n    Export model metrics\n    \"\"\"\n    from tensorflow\
          \ import keras\n    import tensorflow as tf\n    import numpy as np\n  \
          \  import os\n    import glob\n    from sklearn.metrics import confusion_matrix\n\
          \n    #load dataset\n    x_train = np.load(x_train_processed.path)\n   \
          \ x_test = np.load(x_test_processed.path)\n    y_train = np.load(y_train_artifact.path)\n\
          \    y_test = np.load(y_test_artifact.path)\n\n    #load model structure\n\
          \    model = keras.models.load_model(ml_model.path)\n\n    #reading best\
          \ hyperparameters from katib\n    lr=float(hyperparameters[\"lr\"])\n  \
          \  no_epochs = int(hyperparameters[\"num_epochs\"])\n\n    #compile the\
          \ model - we want to have a binary outcome\n    model.compile(tf.keras.optimizers.SGD(learning_rate=lr),\n\
          \              loss=\"sparse_categorical_crossentropy\",\n             \
          \ metrics=['accuracy'])\n\n\n    #fit the model and return the history while\
          \ training\n    history = model.fit(\n      x=x_train,\n      y=y_train,\n\
          \      epochs=no_epochs,\n      batch_size=20,\n    )\n\n\n    # Test the\
          \ model against the test dataset\n    # Returns the loss value & metrics\
          \ values for the model in test mode.\n    model_loss, model_accuracy = model.evaluate(x=x_test,y=y_test)\n\
          \n    #build a confusione matrix\n    y_predict = model.predict(x=x_test)\n\
          \    y_predict = np.argmax(y_predict, axis=1)\n    cmatrix = confusion_matrix(y_test,\
          \ y_predict)\n    cmatrix = cmatrix.tolist()\n    numbers_list = ['0','1','2','3','4','5','6','7','8','9']\n\
          \    #log confusione matrix\n    classification_metrics.log_confusion_matrix(numbers_list,cmatrix)\n\
          \n    #Kubeflox metrics export\n    metrics.log_metric(\"Test loss\", model_loss)\n\
          \    metrics.log_metric(\"Test accuracy\", model_accuracy)\n\n    #adding\
          \ /1/ subfolder for TFServing and saving model to artifact store\n    model_trained.uri\
          \ = model_trained.uri + '/1/'\n    keras.models.save_model(model,model_trained.path)\n\
          \n"
        image: tensorflow/tensorflow
    exec-preprocessing:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - preprocessing
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef preprocessing(metrics : Output[Metrics], x_train_processed :\
          \ Output[Dataset], x_test_processed: Output[Dataset],\n                \
          \  x_train_artifact: Input[Dataset], x_test_artifact: Input[Dataset]):\n\
          \    ''' \n    just reshape and normalize data\n    '''\n    import numpy\
          \ as np\n    import os\n\n    # load data artifact store\n    x_train =\
          \ np.load(x_train_artifact.path) \n    x_test = np.load(x_test_artifact.path)\n\
          \n    # reshaping the data\n    # reshaping pixels in a 28x28px image with\
          \ greyscale, canal = 1. This is needed for the Keras API\n    x_train =\
          \ x_train.reshape(-1,28,28,1)\n    x_test = x_test.reshape(-1,28,28,1)\n\
          \    # normalizing the data\n    # each pixel has a value between 0-255.\
          \ Here we divide by 255, to get values from 0-1\n    x_train = x_train /\
          \ 255\n    x_test = x_test / 255\n\n    #logging metrics using Kubeflow\
          \ Artifacts\n    metrics.log_metric(\"Len x_train\", x_train.shape[0])\n\
          \    metrics.log_metric(\"Len y_train\", x_test.shape[0])\n\n\n    # save\
          \ feuture in artifact store\n    np.save(\"tmp/x_train.npy\",x_train)\n\
          \    os.rename(\"tmp/x_train.npy\", x_train_processed.path)\n\n    np.save(\"\
          tmp/x_test.npy\",x_test)\n    os.rename(\"tmp/x_test.npy\", x_test_processed.path)\n\
          \n"
        image: python:3.7
pipelineInfo:
  description: Detect digits
  name: mnist-classifier-dev
root:
  dag:
    outputs:
      artifacts:
        model-training-classification_metrics:
          artifactSelectors:
          - outputArtifactKey: classification_metrics
            producerSubtask: model-training
        model-training-metrics:
          artifactSelectors:
          - outputArtifactKey: metrics
            producerSubtask: model-training
        preprocessing-metrics:
          artifactSelectors:
          - outputArtifactKey: metrics
            producerSubtask: preprocessing
    tasks:
      load-dataset:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-load-dataset
        taskInfo:
          name: load-dataset
      model-building:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-model-building
        taskInfo:
          name: model-building
      model-training:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-model-training
        dependentTasks:
        - load-dataset
        - model-building
        - preprocessing
        inputs:
          artifacts:
            ml_model:
              taskOutputArtifact:
                outputArtifactKey: ml_model
                producerTask: model-building
            x_test_processed:
              taskOutputArtifact:
                outputArtifactKey: x_test_processed
                producerTask: preprocessing
            x_train_processed:
              taskOutputArtifact:
                outputArtifactKey: x_train_processed
                producerTask: preprocessing
            y_test_artifact:
              taskOutputArtifact:
                outputArtifactKey: y_test_artifact
                producerTask: load-dataset
            y_train_artifact:
              taskOutputArtifact:
                outputArtifactKey: y_train_artifact
                producerTask: load-dataset
          parameters:
            hyperparameters:
              componentInputParameter: hyperparameters
        taskInfo:
          name: model-training
      preprocessing:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-preprocessing
        dependentTasks:
        - load-dataset
        inputs:
          artifacts:
            x_test_artifact:
              taskOutputArtifact:
                outputArtifactKey: x_test_artifact
                producerTask: load-dataset
            x_train_artifact:
              taskOutputArtifact:
                outputArtifactKey: x_train_artifact
                producerTask: load-dataset
        taskInfo:
          name: preprocessing
  inputDefinitions:
    parameters:
      hyperparameters:
        parameterType: STRUCT
  outputDefinitions:
    artifacts:
      model-training-classification_metrics:
        artifactType:
          schemaTitle: system.ClassificationMetrics
          schemaVersion: 0.0.1
      model-training-metrics:
        artifactType:
          schemaTitle: system.Metrics
          schemaVersion: 0.0.1
      preprocessing-metrics:
        artifactType:
          schemaTitle: system.Metrics
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.6.0
